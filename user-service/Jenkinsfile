pipeline {
    agent any
        environment {
            SERVICE_NAME = 'tt_user'
            DOCKER_REPO = 'unan25'
            DOCKER_IMAGE = "${DOCKER_REPO}/${SERVICE_NAME}"
            DOCKER_TAG = 'latest'
            EC2_HOST = 'ubuntu@ec2-3-38-107-1.ap-northeast-2.compute.amazonaws.com'
            EC2_PORT = '22'
        }
    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/builds']],
                    extensions: [[$class: 'PathRestriction', excludedRegions: '', includedRegions: 'user-service/.*']],
                    userRemoteConfigs: [[url: 'https://github.com/unan25/TodayTrend.git']]
                ])
            }
        }
        stage('Gradle Build') {
            steps {
                dir('user-service') {
                    sh 'chmod +x gradlew'
                    sh './gradlew clean build -x test'
                }
            }
        }
        stage('Build and push Docker image') {
            steps {
                script {
                    dir('user-service') {
                        docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-credentials') {
                            def app = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", "-f Dockerfile .")
                            app.push(DOCKER_TAG)
                        }
                    }
                }
            }
        }

        stage('Copy Docker Compose File') {
            steps {
                script {
                    // 전체 경로를 명시
                    sh "scp -o StrictHostKeyChecking=no -P ${EC2_PORT} ${WORKSPACE}/user-service/docker-compose.yml ubuntu@ec2-3-38-107-1.ap-northeast-2.compute.amazonaws.com:/var/lib/jenkins/workspace/TT_User/user-service/docker-compose.yml"
                }
            }
        }

        stage('Rolling Update') {
            steps {
                script {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${EC2_HOST} -p ${EC2_PORT} '
                            cd /user-service
                            docker-compose down
                            docker-compose pull
                            docker-compose up -d
                        '
                    """
                }
            }
        }
    }
}
